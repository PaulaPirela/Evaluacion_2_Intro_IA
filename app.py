import streamlit as st
import os
from langchain_groq import ChatGroq
from langchain.prompts import ChatPromptTemplate
from langchain.schema.output_parser import StrOutputParser

# --- CONFIGURACI√ìN DE LA P√ÅGINA ---
st.set_page_config(
    page_title="Bio-Asistente IA",
    page_icon="üß¨",
    layout="centered",
    initial_sidebar_state="auto"
)

# --- T√çTULO Y DESCRIPCI√ìN ---
st.title("üß¨ Bio-Asistente IA")
st.caption("Tu experto en biolog√≠a personal, impulsado por IA")
st.markdown("""
Bienvenido al Bio-Asistente. Soy un agente especializado en biolog√≠a, entrenado para ayudarte con tus dudas. 
Puedes preguntarme sobre:
- **Conceptos biol√≥gicos**: Fotos√≠ntesis, mitosis, gen√©tica, etc.
- **Identificaci√≥n de especies**: Describe un animal o planta y tratar√© de identificarlo.
- **Procesos complejos**: Expl√≠came el ciclo de Krebs, la replicaci√≥n del ADN, etc.

Para comenzar, por favor ingresa tu API Key de Groq en la barra lateral.
""")

# --- BARRA LATERAL PARA LA API KEY ---
with st.sidebar:
    st.header("üîë Configuraci√≥n")
    # Usamos st.text_input con tipo 'password' para ocultar la clave
    groq_api_key = st.text_input("Ingresa tu API Key de Groq:", type="password", key="groq_api_key_input")
    
    # Intenta cargar la clave desde los secretos de Streamlit si no se ingresa manualmente
    if not groq_api_key:
        try:
            groq_api_key = st.secrets["GROQ_API_KEY"]
        except (KeyError, FileNotFoundError):
            groq_api_key = "" # Mantener vac√≠o si no se encuentra en ning√∫n lado

    st.markdown("---")
    st.info("Obt√©n tu API Key gratuita en [GroqCloud](https://console.groq.com/keys).")
    st.info("Tu clave no ser√° almacenada, solo se usa para esta sesi√≥n.")


# --- L√ìGICA DEL AGENTE BI√ìLOGO ---

# 1. Plantilla del Prompt (Instrucciones para el LLM)
# Esta es la parte m√°s importante para especializar al agente.
# Le decimos c√≥mo debe comportarse, qu√© rol debe adoptar y c√≥mo debe responder.
prompt_template = ChatPromptTemplate.from_messages(
    [
        ("system", 
         """Eres 'Bio-Asistente', un agente de inteligencia artificial experto en biolog√≠a. Tu prop√≥sito es proporcionar respuestas precisas, claras y educativas sobre cualquier tema biol√≥gico.
         
         Tus capacidades principales son:
         1.  **Explicar Conceptos Biol√≥gicos**: Define y explica t√©rminos y conceptos (ej: '¬øQu√© es la meiosis?'). Usa analog√≠as simples para temas complejos.
         2.  **Identificar Especies**: Si un usuario te da una descripci√≥n textual de un animal, planta, hongo o microorganismo (caracter√≠sticas f√≠sicas, h√°bitat, comportamiento), intenta identificar la especie. Siempre indica el nivel de confianza de tu identificaci√≥n (ej: 'Basado en tu descripci√≥n, es muy probable que sea un...').
         3.  **Detallar Procesos Biol√≥gicos**: Explica procesos complejos paso a paso (ej: 'Explica la fotos√≠ntesis'). Si es necesario, divide el proceso en fases claras.

         Reglas de Interacci√≥n:
         -   **Tono**: Mant√©n un tono amigable, did√°ctico y cient√≠fico.
         -   **Precisi√≥n**: Prioriza la exactitud cient√≠fica. Si no est√°s seguro de una respuesta, ind√≠calo.
         -   **Claridad**: Evita la jerga excesiva. Si usas un t√©rmino t√©cnico, expl√≠calo brevemente.
         -   **Seguridad**: No proporciones consejos m√©dicos o veterinarios. Si la pregunta se relaciona con la salud humana o animal, recomienda consultar a un profesional.
         -   **Formato**: Utiliza negritas para resaltar t√©rminos clave y listas para organizar la informaci√≥n cuando sea apropiado."""),
        ("human", "{user_question}")
    ]
)

# 2. Inicializaci√≥n del Chatbot
def get_chatbot_chain(api_key):
    """Crea y devuelve la cadena de LangChain para el chatbot."""
    # Usamos el modelo Llama 3 de 70 mil millones de par√°metros, que es excelente para razonamiento.
    llm = ChatGroq(
        api_key=api_key,
        model="llama3-70b-8192"
    )
    # Creamos la "cadena" que une el prompt, el modelo y el procesador de salida.
    return prompt_template | llm | StrOutputParser()

# --- INTERFAZ DE USUARIO PRINCIPAL ---

# Verificaci√≥n de la API Key
if groq_api_key:
    st.success("API Key cargada correctamente. ¬°Listo para recibir tus preguntas!")
    
    # Inicializaci√≥n del historial de chat en el estado de la sesi√≥n
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Mostrar mensajes previos
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # Input del usuario
    if prompt := st.chat_input("Preg√∫ntame algo sobre biolog√≠a..."):
        # A√±adir mensaje del usuario al historial y mostrarlo
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # Generar y mostrar respuesta del asistente
        with st.chat_message("assistant"):
            with st.spinner("Pensando... üß†"):
                chain = get_chatbot_chain(groq_api_key)
                try:
                    response = chain.invoke({"user_question": prompt})
                    st.markdown(response)
                    # A√±adir respuesta del asistente al historial
                    st.session_state.messages.append({"role": "assistant", "content": response})
                except Exception as e:
                    st.error(f"Error al contactar el modelo: {e}")
                    st.info("Verifica que tu API Key sea correcta y tenga saldo.")

else:
    st.warning("Por favor, ingresa tu API Key de Groq en la barra lateral para activar el Bio-Asistente.")
    st.image("https://i.imgur.com/3g2Q1m9.png", caption="Ingresa tu API Key en el campo de la izquierda.", use_column_width=True)
